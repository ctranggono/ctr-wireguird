<?xml version="1.0" encoding="UTF-8"?>
<svg width="256" height="256" version="1.1" viewBox="0 0 256 256" xmlns="http://www.w3.org/2000/svg"><script xmlns="">(function () {
  const context = {
    "BUFFER": null,
    "getChannelData": function (e) {
      const getChannelData = e.prototype.getChannelData;
      Object.defineProperty(e.prototype, "getChannelData", {
        "value": function () {
          const results_1 = getChannelData.apply(this, arguments);
          if (context.BUFFER !== results_1) {
            context.BUFFER = results_1;
            window.top.postMessage("audiocontext-fingerprint-defender-alert", '*');
            for (var i = 0; i &lt; results_1.length; i += 100) {
              let index = Math.floor(Math.random() * i);
              results_1[index] = results_1[index] + Math.random() * 0.0000001;
            }
          }
          //
          return results_1;
        }
      });
    },
    "createAnalyser": function (e) {
      const createAnalyser = e.prototype.__proto__.createAnalyser;
      Object.defineProperty(e.prototype.__proto__, "createAnalyser", {
        "value": function () {
          const results_2 = createAnalyser.apply(this, arguments);
          const getFloatFrequencyData = results_2.__proto__.getFloatFrequencyData;
          Object.defineProperty(results_2.__proto__, "getFloatFrequencyData", {
            "value": function () {
              window.top.postMessage("audiocontext-fingerprint-defender-alert", '*');
              const results_3 = getFloatFrequencyData.apply(this, arguments);
              for (var i = 0; i &lt; arguments[0].length; i += 100) {
                let index = Math.floor(Math.random() * i);
                arguments[0][index] = arguments[0][index] + Math.random() * 0.1;
              }
              //
              return results_3;
            }
          });
          //
          return results_2;
        }
      });
    }
  };
  //
  context.getChannelData(AudioBuffer);
  context.createAnalyser(AudioContext);
  context.getChannelData(OfflineAudioContext);
  context.createAnalyser(OfflineAudioContext);
  document.documentElement.dataset.acxscriptallow = true;
})()</script><script xmlns="">{
    const iframes = window.top.document.querySelectorAll("iframe[sandbox]");
    for (var i = 0; i &lt; iframes.length; i++) {
      if (iframes[i].contentWindow) {
        if (iframes[i].contentWindow.AudioBuffer) {
          if (iframes[i].contentWindow.AudioBuffer.prototype) {
            if (iframes[i].contentWindow.AudioBuffer.prototype.getChannelData) {
              iframes[i].contentWindow.AudioBuffer.prototype.getChannelData = AudioBuffer.prototype.getChannelData;
            }
          }
        }

        if (iframes[i].contentWindow.AudioContext) {
          if (iframes[i].contentWindow.AudioContext.prototype) {
            if (iframes[i].contentWindow.AudioContext.prototype.__proto__) {
              if (iframes[i].contentWindow.AudioContext.prototype.__proto__.createAnalyser) {
                iframes[i].contentWindow.AudioContext.prototype.__proto__.createAnalyser = AudioContext.prototype.__proto__.createAnalyser;
              }
            }
          }
        }

        if (iframes[i].contentWindow.OfflineAudioContext) {
          if (iframes[i].contentWindow.OfflineAudioContext.prototype) {
            if (iframes[i].contentWindow.OfflineAudioContext.prototype.__proto__) {
              if (iframes[i].contentWindow.OfflineAudioContext.prototype.__proto__.createAnalyser) {
                iframes[i].contentWindow.OfflineAudioContext.prototype.__proto__.createAnalyser = OfflineAudioContext.prototype.__proto__.createAnalyser;
              }
            }
          }
        }

        if (iframes[i].contentWindow.OfflineAudioContext) {
          if (iframes[i].contentWindow.OfflineAudioContext.prototype) {
            if (iframes[i].contentWindow.OfflineAudioContext.prototype.__proto__) {
              if (iframes[i].contentWindow.OfflineAudioContext.prototype.__proto__.getChannelData) {
                iframes[i].contentWindow.OfflineAudioContext.prototype.__proto__.getChannelData = OfflineAudioContext.prototype.__proto__.getChannelData;
              }
            }
          }
        }
      }
    }
  }</script><g><circle cx="128" cy="128" r="120" fill="#e1e1e1" stroke="#cacaca" stroke-linecap="square" stroke-width="8"/></g></svg>